from wordcloud import WordCloud
import matplotlib.pyplot as plt
import jieba
import numpy as np
from PIL import Image  # 用于加载掩码图片
from random import choice

# 示例文本数据
text_data = """
做老年人的社交平台，在年轻人看来，是给老年人的生活增加乐趣，可以和很多同龄人进行交流，可以像年轻人一样，拥有丰富的娱乐生活。但在很多老年人看来，这是对他们最大的残忍，老年人的社交平台，看似将很多老人聚集到了一起，大家都有伴了。但不可逃避的事实是，老年人，是真的不知道一觉睡下去，还能不能再次醒来，可能是刚认识的朋友，刚刚熟悉，突然第二天见不到了，被告知已经去世了。这对于老年人，是非常残忍的，物伤其类，自己也是说不定随时会死去。老年人需要的不是社交平台，需要的是家人，是后人的陪伴，而不是一个随时看到死亡的社交平台。
这个问题非常棒。1、老年人群体之大，是社会治理的重要组成部分。2、老年人群体线上平台其针对性強，需要是客观存在的。3、整合老年人的侯鸟式养老、余热型就业、智慧型献计等十大应用场景4、对老年人呼声、交流、创业、爱好会起到积极的社会正向意义。5、创新中国式的老年人社会精神支柱的新途径新形态。6、如果组成老年人社交平台筹划组我报名参加。
看了很多答案，都在讲人机交互可能是我不懂，但是我想说，那玩意有啥用啊？你以为的场景是老人：小x，帮我打车到xxx小X：好的，并打开软件自动叫车老人是不会用打车软件吗？？或许是但是更多的老年人，他们不知道手机还能打车，或者是不知道自己的手机能不能打车。就像很多老年人在某团买菜等社区电商大规模BD之前，根本不知道手机购物会这么方便！然而科技的力量就像一个潘多拉魔盒，一旦打开就难以收场。老人们也有求知欲，他们会在空闲的时间疯狂探究手机里的那一亩三分地。如何探究？那当然是哪里亮了点哪里再加上她们的思维里不知道手机能干什么，做不到什么，所以才会有大量的老年人通过网络被骗。所以我认为，一个优秀的老年网络终端，需要具备以下两个特点：1.功能引导，让老年人知道自己这部手机能干什么2.广告禁止，一切app禁止携带非本app内功能的广告，阻断老年人下载未知app的途径都说我们被墙被404其实老年人应该被墙中墙最好有部手机，只能下那几个优质电商和社交软件新闻软件，并且这些app定制一个无广告的老年端。这样才能让老年人用机方便且安全

今年过年我没能回老家，除夕的时候，我收到老妈发来的祝福微信：一段小视频。挤满大红灯笼的背景上，金色的玫瑰圈起来一颗爱心，我妈过度美颜的脸在最中间，浓密的睫毛，锐利的下巴，蜜桃般的腮红，配上锣鼓喧天，鞭炮齐鸣的BGM，我那操劳半生淳朴敦厚的老母亲，给我炫了一技，令我心有余悸。但我知道，这已经是她用智能手机的满点技能了，我发了三个大拇指，说，真好看，妈妈春节快乐~老妈研究智能手机不可谓不刻苦，比如她还会经常给我发一些自制表情包，审美风格和春节视频如出一辙；她能用各种短视频平台靠kill time赚钱，虽然赚来的钱一直存在她的微信钱包里不知道怎么用；她还总试图和手机交流，因为我之前给她买了台小度，她觉得手机里应该也有个能跟她对话的“小某某”。因为她的这些“炫技”，和日常基本无障碍的微信交流，我以为老妈好像已经能够非常熟练地使用智能手机。但我常常忽略了，作为一名只有初中学历年近七旬的劳动妇女，智能手机对她来说还远远不够“智能”。有一天晚上，老妈给我打电话，语气害怕又焦急，她说，“我是不是把手机弄坏了？怎么微信写字的地方没有了？”老妈不会拼音，发语音又怕我工作不方便听（是的，她不知道现在可以语音转文字），所以她都用手写。失去手写功能，她就失去了通往我的世界的门路。即使这样，她还是熬到了晚上我下班，才给我打电话。又一次，我给她买了个pad直接寄到了家里，但忽视了她根本不会完成初始设置。最后她拿着pad求助邻居，才用上了这种“高科技”。科技对我们来说，是让生活更便捷的助手，但对她们来说，好像让生活更复杂了。那些深深隐藏在一层又一层菜单里的功能，别说老妈，我找起来都大费周章，有时甚至还要上网搜索教程；想要让老妈在几千张照片里找到一张她想要的照片，对于老花眼的她来说就像大海捞针；像手机导航这种常见功能，老妈更是想都不敢想，从找到APP，输对地址，选择路线，开始语音导航，每一步都是一个难以逾越的鸿沟。老妈基本不打车，除了嫌贵，更因为她招手拦不到车也不会用打车软件；老妈每天6:30准时打开电视看天气预报，因为电视台可以预报当地和北京的天气，而在手机上她不会更换城市；老妈的电视已经用了很多年，她拒绝换新电视，因为亲眼看见我操作智能电视要点十几下遥控器，她学起来头疼；老妈买菜只去菜场和小超市，她不喜欢那些先进的可以自助结账的大超市，想找一个现金收款台她要走很久；老妈坚持不懈地收集零钱，为了在菜市场可以不浪费小贩太多找零的时间。我说，现在都可以微信付款了，人家不愿意收现金。老妈非常有底气地说，“拒收人民币现金违法！”底气足得仿佛她走到哪儿都怀揣着这句话，像怀揣着圣旨，随时准备掏出来，给“科技霸凌”一记暴击。我曾经尝试教老妈玩转智能机，但往往以失败告终。从认知心理学的角度来看，人的流体智力在20岁左右到达顶峰后就开始随着年龄的增长而不断下降，晶体智力在30岁以后的增长也逐渐趋于平缓，让老年人学习一个前60年根本没有听过见过的新工具，对他们来说无疑是很困难的。真正先进的科技，不仅要让懂科技的人享受便利，更应该让不懂科技的人因为有科技而生活得更便利。随着大模型和大模型手机的出现，我觉得老妈要迎来她的“文艺复兴”了。传统的智能机，实际上是人在迁就机器，输入的语言、使用的方式，都是机器式的，没有情感的精确搜索，一个APP干一件事的行为动线，看似智能，实际仍然很机械。而大模型手机，终于开始让机器迁就人，交流的方式更加日常，使用的动线更加自然，很多年前就提出的AI助手概念，到了大模型时代，才总算看出点端倪。对于老年人来说，那些飘在天上的AIGC应用，终于落地了，而且直接落在他们手掌心里。我这次准备用大模型手机，再次重启给老妈的使用教程，帮她和她的老姐妹实现一次自助游。

我现在正在寻找一款适合老人用的app，希望里面不要有各种垃圾虚假信息，不要有各种八卦谣言…我希望能有一款app里面有一些简单的内容，涵盖主流新闻、健康养生、休闲娱乐，传播的是积极正面的东西，活到老学到老，老人现在也需要引导不然很容易误入歧途！

当下，即便用同一款微信，我们已经可以看到，老年人和年轻人有着截然不同的世界；如果从产品的源头就开始划分，结果就更有可能加深了一种数字的区隔，最终的结果可能是老年人在老年微信里面嗨，年轻人在年轻微信里面嗨。科技更应该带来的是全民的数字融入而非源头的区隔。

老年人不擅长使用智能手机已成普遍现象。近年来，尤其是疫情防控转入常态化的大背景下，很多老年人面临扫码难、购物难、就医难、办事难的困扰。

近日，国务院办公厅印发《关于切实解决老年人运用智能技术困难的实施方案》，就进一步推动解决老年人在运用智能技术方面遇到的困难，坚持传统服务方式与智能化服务创新并行，为老年人提供更加周全和贴心的便利化服务作出部署。方案围绕老年人日常生活涉及的出行、就医、消费、文娱、办事等7类高频事项和服务场景，提出了包括完善“健康码”管理、禁止拒收现金在内的20条具体举措要求。

不让老年人“被互联网抛弃”，更显社会人文温度，也是网络时代社会关爱老年人群体的应有之义。让老人学用智能手机，这个短板补得好，也该点赞。

在迅速发展的信息化新时代，不能让老年人“掉队落伍”，应该让老年人一起分享美好、时尚的数字生活。教会老人使用智能手机，这既有利于开发老年人的智力，又能方便老年人的生活，充分体现新时代社会大家庭的温暖。

"""

# 中文分词并过滤不需要的词汇
def chinese_word_cut(text):
    words = jieba.cut(text)
    filtered_words = [word for word in words if word not in ["的", "对","才","会","但是","这个","说","对于","看来","很","还","大","很多","来说","那","已经","所以","又","应该","和","他们","里面","我","她","是","了","在","有","不","老妈","更","可以","手机","给","让","老年人","用","都","就","也","一个","知道","能","但","这","而","因为","里","到","像"] ] # 过滤掉“的”和“和”
    return " ".join(filtered_words)

# 对文本进行分词
text_cut = chinese_word_cut(text_data)

#导入停词
stop_words=open("tingci.txt",encoding="utf-8").read().split("\n")

# 加载掩码图片（老人剪影）
mask_image = np.array(Image.open("lao1.png"))  # 替换为你的图片路径

# 定义蓝绿色调的颜色函数
#def blue_green_color_func(word, font_size, position, orientation, random_state=None, **kwargs):
    #blue_green_colors = ["#00CED1", "#20B2AA", "#40E0D0", "#48D1CC", "#5F9EA0", "#66CDAA"]
    #return choice(blue_green_colors)

# 定义蓝绿色调的颜色函数
def zhuti_color_func(word, font_size, position, orientation, random_state=None, **kwargs):
    zhuti_colors = ["#7E97AD", "#99A5BF", "#A3B7A0", "#C7B8A1"]
    return choice(zhuti_colors)


# 生成方形词云
wordcloud = WordCloud(
    font_path="simhei.ttf",  # 设置中文字体路径
    width=1600,  # 增加宽度
    height=800,  # 增加高度
    background_color="white",  # 背景颜色为白色
    max_words=200,  # 最大词数
    collocations=False,  # 避免重复词
    color_func=zhuti_color_func,  # 使用蓝绿色调颜色函数
    prefer_horizontal=0.9,  # 调整词语水平排列的比例
    scale=2,  # 提高分辨率
    contour_width=0,  # 无轮廓线
    contour_color=None,  # 无轮廓颜色
    mask=mask_image,  # 不使用掩码
    stopwords=stop_words,
).generate(text_cut)

# 显示词云图
plt.figure(figsize=(10, 5), dpi=300)  # 增加画布尺寸和分辨率
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")  # 关闭坐标轴
plt.show()

# 保存词云图
#wordcloud.to_file("blue_green_wordcloud_high_res.png")
wordcloud.to_file("ciyun2.png")